# Assist for Home Assistant
# Board: ESP32-S3 DevKit
# Microphone: INMP441
# Speaker: MAX98357
# Input: Push-Button
# Outputs: LED Strip, Simple LED

external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: main
    components: [ adf_pipeline, i2s_audio ]

esphome:
  name: assists3
  comment: Voice Assist on ESP32-S3
  friendly_name: VA Igor
  name_add_mac_suffix: false
  min_version: 2024.2.0
  platformio_options:
    board_build.flash_mode: dio
    board_upload.maximum_size: 16777216
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.arduino.memory_type: qio_opi
  on_boot:
    priority: -100
    then:
      - lambda: id(ui_phase) = ${ui_state_starting};
      - script.execute: control_ui
      - media_player.volume_set: 35%

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  services:
    - service: start_va
      then:
        - voice_assistant.start
    - service: stop_va
      then:
        - voice_assistant.stop

ota:

wifi:
  ssid: !secret ssid
  password: !secret pass
  power_save_mode: none
  enable_on_boot: True
  fast_connect: True
  output_power: 8.5

web_server:
  port: 80
  include_internal: true

logger:
  hardware_uart : UART0
  level: INFO

substitutions:
  ui_state_starting: '0'
  ui_state_idle: '1'
  ui_state_wakeword: '2'
  ui_state_listening: '3'
  ui_state_thinking: '4'
  ui_state_replying: '5'
  ui_state_error: '11'
  ui_state_muted: '12'

globals:
  - id: ui_phase
    type: int
    restore_value: no
    initial_value: ${ui_state_starting}

############################ Buttons / Switches

binary_sensor:
  - platform: gpio
    pin:
      number: 13
      inverted: true
      mode:
        input: true
        pullup: true
    name: Toggle Wake Word
    id: button
    on_press:
      - switch.toggle: use_wake_word

switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: turn_on_wake_word
    on_turn_off:
      - script.execute: turn_off_wake_word

############################ Lights

spi:
  mosi_pin: 4
  clk_pin: 5

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: SK6812
    name: "On Board LED"
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 500ms
          min_brightness: 0%
          max_brightness: 50%
  - platform: spi_led_strip
    num_leds: 32
    id: led_strip
    name: "RGB LED Strip"
    data_rate: 200kHz
    effects:
      - addressable_color_wipe:
          name: "Rotating Red"
          colors:
            - red: 20%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 7
          add_led_interval: 75ms
          reverse: false
      - addressable_color_wipe:
          name: "Rotating Green"
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 2
              gradient: true
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 2
              gradient: true
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 10
          add_led_interval: 50ms
          reverse: false
      - pulse:
          name: "Fast Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 500ms
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Super Slow Pulse"
          transition_length: 2s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 50%
  - platform: monochromatic
    id: led_wakeword
    name: "LED Mute"
    output: led1_out
    default_transition_length: 250ms

output:
  - platform: ledc
    pin: GPIO6
    id: led1_out

############################ Audio

i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: GPIO20   # INMP441 WS
    i2s_bclk_pin: GPIO21    # INMP441 SCK
  - id: i2s_out
    i2s_lrclk_pin: GPIO46   # MAX98357 LRC
    i2s_bclk_pin: GPIO9     # MAX98357 BCK

adf_pipeline:
  - platform: i2s_audio
    type: sink
    id: adf_i2s_out
    i2s_audio_id: i2s_out
    i2s_dout_pin: GPIO10    # MAX98357 DIN

  - platform: i2s_audio
    type: source
    id: adf_i2s_in
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO19     # INMP441 DO
    channel: left
    sample_rate: 16000
    bits_per_sample: 16bit

microphone:
  - platform: adf_pipeline
    id: adf_microphone
    pipeline:
      - adf_i2s_in
      - self

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3_media_player
    internal: false
    pipeline:
      - self
      - adf_i2s_out

############################ Voice Assistant

micro_wake_word:
  model: hey_jarvis
  on_wake_word_detected:
    then:
      - lambda: id(ui_phase) = ${ui_state_listening};
      - script.execute: control_ui
      - voice_assistant.start

voice_assistant:
  id: voice_assist
  microphone: adf_microphone
  media_player: adf_media_player
  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 32.0
  use_wake_word: false
  on_listening:
    - lambda: id(ui_phase) = ${ui_state_listening};
    - script.execute: control_ui
  on_tts_start:
    - lambda: id(ui_phase) = ${ui_state_replying};
    - script.execute: control_ui
  on_end:
    - wait_until:
        not:
          media_player.is_playing:
    - delay: 500ms
    - if:
        condition:
          - switch.is_on: use_wake_word
        then:
          - delay: 200ms
          - script.execute: turn_on_wake_word
        else:
          - lambda: id(ui_phase) = ${ui_state_idle};
          - script.execute: control_ui
  on_error:
    - lambda: id(ui_phase) = ${ui_state_error};
    - script.execute: control_ui
  on_client_connected:
    - lambda: id(ui_phase) = ${ui_state_idle};
    - script.execute: control_ui

############################ Scripts

script:
  - id: control_ui
    then:
      - lambda: |
          switch(id(ui_phase)) {
            default:
            case ${ui_state_starting}:
              id(led_strip).turn_on().set_effect("Rotating Red").perform();
            break;
            case ${ui_state_idle}:
              id(led_strip).turn_off().perform();
            break;
              case ${ui_state_wakeword}:
              id(led_strip).turn_on().set_rgb(0, 1, 0).set_brightness(0.2).perform();
            break;
            case ${ui_state_listening}:
              id(led_strip).turn_on().set_rgb(0, 1, 0).set_brightness(1.0).perform();
            break;
            case ${ui_state_thinking}:
              id(led_strip).turn_on().set_rgb(0, 1, 1).set_brightness(0.5).perform();
            break;
            case ${ui_state_replying}:
              id(led_strip).turn_on().set_rgb(0, 0, 1).set_brightness(0.2).perform();
            break;
            case ${ui_state_error}:
              id(led_strip).turn_on().set_rgb(1, 0, 0).set_brightness(0.2).set_effect("Fast Pulse").perform();
            break;
            case ${ui_state_muted}:
              id(led_strip).turn_on().set_rgb(1, 0, 0).set_brightness(0.2).set_effect("Slow Pulse").perform();
            break;
          }


  - id: turn_on_wake_word
    then:
      - light.turn_off: led_wakeword
      - micro_wake_word.start
      - if:
          condition:
            media_player.is_playing:
          then:
            - media_player.stop:
      - lambda: id(ui_phase) = ${ui_state_wakeword};
      - script.execute: control_ui

  - id: turn_off_wake_word
    then:
      - light.turn_on: led_wakeword
      - micro_wake_word.stop
      - lambda: id(ui_phase) = ${ui_state_idle};
      - script.execute: control_ui
